##
# Lists all connections a node has to other nodes,
# in this node 15 is a person, and we know in which
# movies he's acting.

GET /nodes/15/connections/acting

Response: 200 OK

Body:
    [
      { "id"   :  23
      , "from" : "15"
      , "to"   : "12"
      , "type" : "Acting"
      , "payload" : { 
            "weight" : "1.0"}
      }
    ]

##
# Lists all connections a node has to other nodes,
# in this node 15 is a person, and we know in which
# movies he's acting. We restrict it to outoing edges
# (you can also ask for incoming edges)

GET /nodes/15/connections/outgoing

Response: 200 OK

Body:
    [
      { "id"   :  23
      , "from" : "15"
      , "to"   : "12"
      , "type" : "Acting"
      , "payload" : { 
            "weight" : "1.0"}
      }
    ]



##
# The acting connection from node 15 to node 22,
#
GET /nodes/15/connections/acting/22

Response: 200 OK

Body:
    { "id"   :  23
    , "from" : "15"
    , "to"   : "12"
    , "type" : "Acting"
    , "payload" : { 
          "weight" : "1.0"}
    }

##
# Check if node 15 is connected to node 22 throuh a
# genre_tagging connection. Answer is no 
#
GET /nodes/15/connections/genre_tagging/22

Response: 404 OK


##
# If a node does not have any connections, you will
# get an empty array as body (you can always rely on
# this resource being represented as an array).

GET /nodes/22/connections/acting

Response: 200 OK

Body:
    []

##
# Node 13 is a person and node 12 is a person, so
# let's connect these two with an acting relationship. 
# Notice that all data is contained in the `payload`
# key.

PUT /nodes/13/connections/acting/12

Body:
    { "weight": 1.0 }

Response: 200 OK

Body:
    { "from" : "13"
    , "to"   : "12"
    , "type" : "acting"
    , "payload" : { 
        "weight" : "1.0"}
    }


##
# When you try to fetch connections of a connection type
# that does not exist, you'll get an error

GET /nodes/13/connections/silly_stuffs

Response: 400 BAD REQUEST


##
# Gets the outgoing degree of the node with id 1, throw 
# the connection type likes

GET /nodes/1/connections/likes/outgoing/degree

Response: 200 OK

Body:
    { "degree" : "1" }


##
# Gets the incoming degree of the node with id 1, throw 
# the connection type likes

GET /nodes/1/connections/likes/incoming/degree

Response: 200 OK

Body:
    { "degree" : "2" }


##
# Gets the outgoing degree of the node with id 1, without 
# filtering the node connection types.

GET /nodes/1/connections/all/outgoing/degree

Response: 200 OK

Body:
    { "degree" : "3" }


##
# Gets the outgoing degree of the node with id 1, without 
# filtering the node connection types. The default degree 
# direction. Keeps usage by user api easier.

GET /nodes/1/connections/likes/degree

Response: 200 OK

Body:
    { "degree" : "3" }

##
# Deleted all connection of a certaing type 
# who belongs to a certaing node.

DELETE /nodes/15/connections/acting

Response: 200 OK
